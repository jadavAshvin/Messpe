import 'dart:io';
import 'dart:math' as math;

class FiltersMatrix {
  static double bias = Platform.isIOS ? 1 : 255;
  static double biasRev = Platform.isIOS ? 255 : 1;


  static changeOpacityOfMatrix(List<double> realMatrix,double opacity) {

    List<double> matrix = [...realMatrix];
    // for(int i=1; i<16; i+=5) {
    //   for(int j=1; j<=3; j++) {
    //     matrix[i+j] = matrix[i+j]/opacity;
    //   }
    // }
    matrix[18] = opacity;
    return  matrix;
  }
  static Map<String, List<double>> filtersList = {
    "normal": [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0],
    "sephia": [
      0.39, 0.769, 0.189, 0.0, 0.0,
      0.349, 0.686, 0.168, 0.0, 0.0,
      0.272, 0.534, 0.131, 0.0, 0.0,
      0.0, 0.0, 0.0, 1.0, 0.0
    ],
    "cool": [
      0.99,
      0,
      0,
      0,
      0,
      0,
      0.93,
      0,
      0,
      0,
      0,
      0,
      1.08,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ],
    "technicolor": [
      1.9125277891456083,
      -0.8545344976951645,
      -0.09155508482755585,
      0,
      11.793603434377337 / biasRev,
      -0.3087833385928097,
      1.7658908555458428,
      -0.10601743074722245,
      0,
      -70.35205161461398 / biasRev,
      -0.231103377548616,
      -0.7501899197440212,
      1.847597816108189,
      0,
      30.950940869491138 / biasRev,
      0,
      0,
      0,
      1,
      0
    ],
    "polaroid": [
      1.438,
      -0.062,
      -0.062,
      0,
      0,
      -0.122,
      1.378,
      -0.122,
      0,
      0,
      -0.016,
      -0.016,
      1.483,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ],
    "kodachrome": [
      1.1285582396593525,
      -0.3967382283601348,
      -0.03992559172921793,
      0,
      63.72958762196502 / biasRev,
      -0.16404339962244616,
      1.0835251566291304,
      -0.05498805115633132,
      0,
      24.732407896706203 / biasRev,
      -0.16786010706155763,
      -0.5603416277695248,
      1.6014850761964943,
      0,
      35.62982807460946 / biasRev,
      0,
      0,
      0,
      1,
      0
    ],
    "browni": [
      0.5997023498159715,
      0.34553243048391263,
      -0.2708298674538042,
      0,
      47.43192855600873 / biasRev,
      -0.037703249837783157,
      0.8609577587992641,
      0.15059552388459913,
      0,
      -36.96841498319127 / biasRev,
      0.24113635128153335,
      -0.07441037908422492,
      0.44972182064877153,
      0,
      -7.562075277591283 / biasRev,
      0,
      0,
      0,
      1,
      0
    ],
    "vintage": [
      0.6279345635605994,
      0.3202183420819367,
      -0.03965408211312453,
      0,
      9.651285835294123 / biasRev,
      0.02578397704808868,
      0.6441188644374771,
      0.03259127616149294,
      0,
      7.462829176470591 / biasRev,
      0.0466055556782719,
      -0.0851232987247891,
      0.5241648018700465,
      0,
      5.159190588235296 / biasRev,
      0,
      0,
      0,
      1,
      0
    ],
    "lsd": [
      2,
      -0.4,
      0.5,
      0,
      0,
      -0.5,
      2,
      -0.4,
      0,
      0,
      -0.4,
      -0.5,
      3,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ],
    "SEPIA_MATRIX": [
      0.39,
      0.769,
      0.189,
      0.0,
      0.0,
      0.349,
      0.686,
      0.168,
      0.0,
      0.0,
      0.272,
      0.534,
      0.131,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      1.0,
      0.0
    ],
    "GREYSCALE_MATRIX": [
      0.2126,
      0.7152,
      0.0722,
      0.0,
      0.0,
      0.2126,
      0.7152,
      0.0722,
      0.0,
      0.0,
      0.2126,
      0.7152,
      0.0722,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      1.0,
      0.0
    ],
    "VINTAGE_MATRIX": [
      0.9,
      0.5,
      0.1,
      0.0,
      0.0,
      0.3,
      0.8,
      0.1,
      0.0,
      0.0,
      0.2,
      0.3,
      0.5,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      1.0,
      0.0
    ],
    "FILTER_1": [
      1.0,
      0.0,
      0.2,
      0.0,
      0.0,
      0.0,
      1.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      1.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      1.0,
      0.0
    ],
    "FILTER_2": [
      0.4,
      0.4,
      -0.3,
      0.0,
      0.0,
      0.0,
      1.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      1.2,
      0.0,
      0.0,
      -1.2,
      0.6,
      0.7,
      1.0,
      0.0
    ],
    "FILTER_3": [
      0.8,
      0.5,
      0.0,
      0.0,
      0.0,
      0.0,
      1.1,
      0.0,
      0.0,
      0.0,
      0.0,
      0.2,
      1.1,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      1.0,
      0.0
    ],
    "FILTER_4": [
      1.1,
      0.0,
      0.0,
      0.0,
      0.0,
      0.2,
      1.0,
      -0.4,
      0.0,
      0.0,
      -0.1,
      0.0,
      1.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      1.0,
      0.0
    ],
    "FILTER_5": [
      1.2,
      0.1,
      0.5,
      0.0,
      0.0,
      0.1,
      1.0,
      0.05,
      0.0,
      0.0,
      0.0,
      0.1,
      1.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      1.0,
      0.0
    ],
    "nightvision": [
      0.1,
      0.4,
      0,
      0,
      0,
      0.3,
      1,
      0.3,
      0,
      0,
      0,
      0.4,
      0.1,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ],
  };

  static List<double> contrast(double v) {
    int bias = 255;
    final n = 0.5 * (1 - v);
    return [
      v,
      0,
      0,
      0,
      bias * n,
      0,
      v,
      0,
      0,
      bias * n,
      0,
      0,
      v,
      0,
      bias * n,
      0,
      0,
      0,
      1,
      0
    ];
  }

  static List<double> brightness(double v) {
    return [v, 0, 0, 0, 0, 0, v, 0, 0, 0, 0, 0, v, 0, 0, 0, 0, 0, 1, 0];
  }

  static List<double> temperature(double v) {
    return [1 + v, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1 - v, 0, 0, 0, 0, 0, 1, 0];
  }

  static List<double> tint(double v) {
    return [1 + v, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1 + v, 0, 0, 0, 0, 0, 1, 0];
  }

  static List<double> saturation(double v) {
    return [
      0.213 + 0.787 * v,
      0.715 - 0.715 * v,
      0.072 - 0.072 * v,
      0,
      0,
      0.213 - 0.213 * v,
      0.715 + 0.285 * v,
      0.072 - 0.072 * v,
      0,
      0,
      0.213 - 0.213 * v,
      0.715 - 0.715 * v,
      0.072 + 0.928 * v,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ];
  }

  static List<double> predactor(double v) {
    double biasRev = 1;
    return [
      // row 1
      11.224130630493164 * v,
      -4.794486999511719 * v,
      -2.8746118545532227 * v,
      0 * v,
      0.40342438220977783 * v / biasRev,
      // row 2
      -3.6330697536468506 * v,
      9.193157196044922 * v,
      -2.951810836791992 * v,
      0 * v,
      -1.316135048866272 * v / biasRev,
      // row 3
      -3.2184197902679443 * v,
      -4.2375030517578125 * v,
      7.476448059082031 * v,
      0 * v,
      0.8044459223747253 * v / biasRev,
      // row 4
      0, 0, 0, 1, 0
    ];
  }

  static List<double> threshold(double v) {
    const rLum = 0.03086;
    const gLum = 0.06094;
    const bLum = 0.00820;
    const r = rLum * 255;
    const g = gLum * 255;
    const b = bLum * 255;
    const bias = 255;

    return [
      r,
      g,
      b,
      0,
      -bias * v,
      r,
      g,
      b,
      0,
      -bias * v,
      r,
      g,
      b,
      0,
      -bias * v,
      0,
      0,
      0,
      1,
      0
    ];
  }

  static List<double> sharpenImage(double amount) {
    return [
      0, 0,amount*-1, 0,0,
      0,amount-1,amount*-5,amount*-1,0,
      0, 0,amount*-1, 0,0,
      0, 0, 0, 0,0
    ];
  }



  // static List<double> sharpenImage(double amount) {
  //   return
  //     [-amount, -amount, -amount,
  //   -amount, amount * 8 + 1, -amount,
  //   -amount, -amount, -amount];
  // }

  static List<double> hue(double v) {
    double cos = math.cos(v);
    double sin = math.sin(v);
    double a00 = (0.213) + (cos * 0.787) - (sin * 0.213);
    double a01 = (0.715) - (cos * 0.715) - (sin * 0.715);
    double a02 = (0.072) - (cos * 0.072) + (sin * 0.928);
    double a10 = (0.213) - (cos * 0.213) + (sin * 0.143);
    double a11 = (0.715) + (cos * 0.285) + (sin * 0.140);
    double a12 = (0.072) - (cos * 0.072) - (sin * 0.283);
    double a20 = (0.213) - (cos * 0.213) - (sin * 0.787);
    double a21 = (0.715) - (cos * 0.715) + (sin * 0.715);
    double a22 = (0.072) + (cos * 0.928) + (sin * 0.072);

    return [
      a00,
      a01,
      a02,
      0,
      0,
      a10,
      a11,
      a12,
      0,
      0,
      a20,
      a21,
      a22,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ];
  }
}